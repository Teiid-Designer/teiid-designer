<?xml version="1.0" encoding="UTF-8"?>

<chapter id="managing-vdbs-chapter">
  <title>Managing VDBs</title>
  	
	<para>As stated in the introduction, the critical artifact for Teiid Designer the VDB, or Virtual DataBase. This 
		section describes the details of how to create, edit, deploy and test your VDBs.
	</para>
	
	<!-- ####### VDB CONTENT and STRUCTURE ######################################### -->
	
	<section id="create-vdb">
		<title>Creating a VDB</title>
		<para>To create an empty VDB launch Eclipse's <emphasis role="bold">New</emphasis> wizard, open the 
			<emphasis role="bold">Teiid Designer</emphasis> category folder and select
			<emphasis role="bold">Teiid VDB</emphasis>. You can also select one or more models in a model project, 
			right-click and select <emphasis role="bold">New > Teiid VDB</emphasis> action.> 
		</para>
		<para>Launching this wizard will open the New VDB dialog. If you launched with one or more models selected
			the dialog will contain the pre-selected models for inclusion in the new VDB.
		</para>
		<figure>
			<title>New VDB Dialog</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/screencaps/new-vdb-wizard.png"/>
				</imageobject>
			</mediaobject>
		</figure>
        <note>
		      <para>A VDB is scoped to be aware of models and files within the same model project as the VDB. You 
			     will not be allowed to add models to a VDB that exist in a different project.
		      </para>
        </note>
	</section>
	
	<section id="edit-vdb">
		<title>Editing a VDB</title>
		<para>To Edit an existing VDB, select the VDB in the explorer and right-click select Open action or simply
			double-click the VDB. The VDB will be opened in a VDB Editor. (See the <xref linkend="vdb-editor-section" /> section)
		</para>
	</section>
	
	<section id="test-vdb">
		<title>Test a VDB</title>
		<para> For details on how to test your VDB, see 
			   <xref linkend="test-vdb-section" /> section
		</para>
	</section>
	
	<section id="multi-source-bindings">
		<title>Multi-source Binding Support</title>
		<para> Teiid Designer now supports the Teiid feature of defining relational source models and binding them
			to multiple data sources.</para>
		<para>Multi-source models can be used to quickly access data in multiple sources with homogeneous metadata. 
			When you have multiple instances using identical schema, Teiid can help you gather data across all the 
			instances, using "multi-source" models. In this scenario, instead of creating/importing a model for 
			every data source, one source model is defined to represents the schema and is configured with 
			multiple data "sources" underneath it. During runtime when a query issued against this model,
			 the query engine analyzes the information and gathers the required data from all sources configured and 
			 gathers the results and provides in a single result. Since all sources utilize the same physical 
			 metadata, this feature is most appropriate for accessing the same source type with multiple instances</para>
		<para>The VDB editor's <emphasis role="bold">Models</emphasis> tab now contains a simplified model table on the left and a new 
			tabbed panel on the right containing <emphasis role="bold">Model Details</emphasis> and 
			<emphasis role="bold">Source Binding Definition</emphasis> tabs.  
			Click the <emphasis role="bold">Multi-source</emphasis> check box if you wish to add additional source bindings. Note that each 
			binding must be defined with a unique <emphasis role="bold">Source Name</emphasis> as well as unique 
			<emphasis role="bold">JNDI Name</emphasis> representing a deployed data source you your server. </para>
		<figure>
			<title>VDB Editor's Source Binding Definition</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/screencaps/vdb-editor-source-binding-tab.png"/>
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	
	<section id="udfs-in-vdb">
		<title>UDF support</title>
		<para>In Teiid Designer you can create, manage and use User Defined Functions (UDFs). These functions allow you to 
			perform simple or complex java operations on your data during runtime. This is accomplished by deploying your 
			custom UDF jars on your server and creating a scalar function representation of your function method to use
			in your view transformation. In the VDB Editor, you have the option of including your UDF jars as part of
			the VDB artifact. If included in the VDB, the jars will automatically be deployed to the server for you when
			the VDB is deployed.
		</para>
		<para>The figure below illustrates a sample project setup which includes a UDF jar in a lib folder under
			a project. When a model defining a UDF is added to a VDB, each function is interrogated and it's referenced UDF jar
			(if available) is added to the VDB as well as shown in the UDF Jars tab in the editor.
			<figure>
				<title>UDF Jar In Project and VDB</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/screencaps/udf-jar-in-project-lib-folder.png"/>
					</imageobject>
				</mediaobject>
			</figure>
		</para>
	</section>
	
	<section id="reuse-vdbs">
		<title>Reusing VDBs</title>
		<para>Teiid 8.1 introduced the ability to treat your deployed VDB as just another database where the 
			database category is your VDB name and each visible model in your VDB is treated as a schema. 
			This is accomplished via a new &lt;import-vdb&gt; element in the vdb.xml definition. 
			(see <ulink url="https://docs.jboss.org/author/display/TEIID/VDB+Reuse">Teiid VDB Reuse section</ulink>). 
			By allowing VDB's to referenced other VDBs, users can create reusable database components and reduce 
			the amount of modeling required to create complex transformations.</para>

 

		<para>The sample vdb.xml file below highlights the &lt;import-vdb&gt; element and the corresponding 
			import-vdb-reference within the view model's &lt;model&gt; element.
		</para>
		
<synopsis>
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;vdb version="1" name="PartssupplierViewsVDB"&gt;
    &lt;property value="false" name="preview"/&gt;
    &lt;import-vdb import-data-policies="false" version="1" name="PartssupplierSourcesVDB"/&gt;
    &lt;model visible="true" type="VIRTUAL" name="PartsViewModel" path="/PartssupplierProject/PartsViewModel.xmi"&gt;
        &lt;property value="1623826484" name="checksum"/&gt;
        &lt;property value="Relational" name="modelClass"/&gt;
        &lt;property value="false" name="builtIn"/&gt;
        &lt;property value="655076658.INDEX" name="indexName"/&gt;
        &lt;property value="PartssupplierSourcesVDB" name="import-vdb-reference"/&gt;
    &lt;/model&gt;
&lt;/vdb&gt;
</synopsis>

		<para>Teiid Designer exposes this capability by allowing users to import metadata from deployed VDBs via 
			the JDBC Import option. Through this import, relational VDB source models are created which 
			structurally represent the Catalog (VDB), Schema (Model) and Tables in Virtual DataBase.
		</para>

		<para>When dealing with the these VDB source models there are some limitations or rules, namely:
			<itemizedlist>
				<listitem>
					<para> VDB source models are read-only</para>
				</listitem>
				<listitem>
					<para> VDB source model name is determined by the deployed model name (schema) from the VDB it 
						was imported from</para>
				</listitem>
				<listitem>
					<para> Model names have to be unique within a model project</para>
					<itemizedlist>
						<listitem>
							<para> VDB source models have to be imported/created in a project different than the project 
								used to create and deploy the Reuse VDB
		    				</para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem>
					<para> The JDBC Import Wizard will restrict your options to comply with these rules</para>
				</listitem>
			</itemizedlist>
		</para>
 

		<para>To create a VDB source model:</para>
		<itemizedlist>
			<listitem>
				<para><emphasis role="bold">Step 1 </emphasis> - Deploy your VDB
				</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Step 2 </emphasis> - Launch the JDBC Import Wizard via the 
					"<emphasis role="bold">Import &gt; Teiid Designer &gt; JDBC Database &gt;&gt; Source Model</emphasis>" action
				</para>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Step 3 </emphasis> - On the first page of the wizard create/select 
					a valid connection profile for your deployed VDB.
					<itemizedlist>
						<listitem>
   							<para>The wizard will detect that the connection profile is a Teiid VDB connection 
   								and a section will be displayed on the wizard page titled 
   								<emphasis role="bold">Teiid VDB Source Options</emphasis>
   							</para>
   						</listitem>
   						<listitem>
   						    <para>If <emphasis role="bold">Import as VDB source model</emphasis> is NOT checked, 
   						    	then the wizard will continue importing as a normal JDBC import
   							</para>
   						</listitem>
   					</itemizedlist>
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/screencaps/jdbc-import-page-1-vdb-source.png"/>
					</imageobject>
				</mediaobject>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Step 4 </emphasis> - On the 3rd page, titled 
					<emphasis role="bold">Select Database Objects</emphasis>, select a single schema to use to 
					create as VDB source model.</para>
                <note>
                    <para>The schema names are the names of the visible models in your deployed VDB.</para>
                </note>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/screencaps/jdbc-import-page-3-vdb-source-error.png"/>
					</imageobject>
				</mediaobject>
			</listitem>
			<listitem>
				<para><emphasis role="bold">Step 5 </emphasis> - The final page shows the name of the resulting 
					VDB source model and the name is NOT editable.
					<itemizedlist>
						<listitem>
   							<para>All other options are disabled
   							</para>
   						</listitem>
   						<listitem>
   						    <para>The target <emphasis role="bold">Into Folder</emphasis> must NOT contain a model 
   						    	with the same name or the <emphasis role="bold">Finish</emphasis> button will be disabled
   							</para>
   						</listitem>
   					</itemizedlist>
				</para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/screencaps/jdbc-import-page-4-vdb-source.png"/>
					</imageobject>
				</mediaobject>
			</listitem>
		</itemizedlist>
		<para>You can use your VDB source model like any other source model in your project. 
			VDB source model tables can be used in your transformation queries and the view models 
			will contain model imports to your VDB source models. However, when your view model is added to a 
			VDB, any referenced VDB source models do NOT get added to your VDB. 
			Instead, an &lt;import-vdb&gt; element (described above) reference is added in it's place.
		</para>
		<para>If VDB imports exist for a VDB, the <emphasis role="bold">Show Import VDBs</emphasis> button will be 
			enabled and allow viewing the names of the imported VDBs as shown below. Note that the dialog now supports editing of the version number for 
			each referenced VDB.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/screencaps/show-import-vdbs-dialog.png"/>
			</imageobject>
		</mediaobject>
	</section>
	<section id="vdb-security">
		<title>Security and Data Access</title>
		<para>You have some options on defining your data access security for your VDB via the VDB Editor 
			(See the <xref linkend="vdb-editor-section" /> section).</para>
		<para>The first level is provided by the model visibility 
			check-box in the Models section (Spyglass column). If unchecked, that model and it's contents will not be 
			returned by the Teiid runtime with the standard JDBC metadata.
		</para>
		<para>The next level of security is provided defining permissions for your data roles which can be managed via 
			the lower panel in the VDB Editor. For a unique data role, each model and most objects within that model 
			can have specific values of data access including:
			<itemizedlist>
				<listitem><para>Security (Row-based condition and column masking)</para></listitem>
				<listitem><para>Create</para></listitem>
				<listitem><para>Read</para></listitem>
				<listitem><para>Update</para></listitem>
				<listitem><para>Delete</para></listitem>
				<listitem><para>Execute</para></listitem>
				<listitem><para>Alter</para></listitem>
 			</itemizedlist>
		</para>
		<para> The image below is an example of the <emphasis role="bold">Permissions</emphasis> defined for a data role.</para>
		<figure>
			<title>Permissions Section</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/screencaps/models-tab-with-security-column.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>Teiid provides 2 security concepts for object level permissions: (see <ulink url="https://docs.jboss.org/author/display/teiid88final/Permissions"><citetitle>Permissions</citetitle></ulink>)
			<itemizedlist>
				<listitem>
					<para>Row-Based Security is a permission against a fully qualified table/view/procedure may also specify a condition.</para>
					<itemizedlist>
						<listitem><para>Unlike the allow CRUD actions defined above, a condition is always applied - not just at the user 
							query level. The condition can be any valid SQL referencing the columns of the table/view/procedure. 
							Procedure result set columns may be referenced as proc.col. The condition will act as a row-based 
							filter and as a checked constraint for insert/update operations.</para>
						</listitem><listitem><para>
							An example of a condition might be:   <emphasis role="bold">column1=user()</emphasis>
						</para>
						</listitem>
					</itemizedlist>
				</listitem>
				<listitem><para>Column Masking is "a permission against a fully qualified table/view/procedure column may 
					also specify a mask and optionally a condition."</para>
					<itemizedlist>
						<listitem><para>When the query is submitted the roles are consulted and the relevant mask/condition information 
							are combined to form a searched case expression to mask the values that would have been returned by the access. 
							Unlike the CRUD allow actions defined above, the resulting masking effect is always applied - not just at the user query level. 
							The condition and expression can be any valid SQL referencing the columns of the table/view/procedure. 
							Procedure result set columns may be referenced as proc.col.</para>
						</listitem><listitem><para>
							An example of a mask might be: <emphasis role="bold">CASE WHEN column1=user() THEN column1 END   </emphasis>
						</para>
						</listitem>
					</itemizedlist>
				</listitem>
			</itemizedlist>
		</para>
		<para>You can define Row and Column Based security in Designer's Data Row Wizard.  By double-clicking a target table, 
			view, procedure or column in the Models table, the appropriate editor dialog will be displayed. 
			Note those objects that already have existing security defined are highlighted in blue.
		</para>
		<para>If a table, view or procedure is double-clicked, the Row Filter Definition dialog is displayed. 
			Enter a valid SQL condition and specify whether or not this filter should be treated as a constraint or not.
		</para>
		<figure>
			<title>Row Filter Definition Dialog</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/screencaps/row-filter-definition-dialog-d-click.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>If a column is double-clicked, the Row Filter Definition dialog is displayed. 
			Enter valid column masking SQL expression, an optional order (see Teiid documentation) and an option condition expression.
		</para>
		<figure>
			<title>Column Masking Definition Dialog</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/screencaps/column-masking-definition-dialog-d-click.png"/>
				</imageobject>
			</mediaobject>
		</figure>
		<para>You can also edit these these values via the <emphasis role="bold">Add, Edit and Remove</emphasis> buttons on the respective Row Filter and Column Masking tabs
			<figure>
				<title>Row Filter Tab</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/screencaps/row-based-security-tab.png"/>
					</imageobject>
				</mediaobject>
			</figure>
		</para>
		<figure>
			<title>Column Masking Tab</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/screencaps/column-mask-tab.png"/>
				</imageobject>
			</mediaobject>
		</figure>
	</section>
	<section id="vdb-dynamic-import-export">
		<title>Working with Dynamic VDBs</title>
		<para>This section desribes the Designer features which allow generating a VDB archive with XMI models from existing dynamic
		VDBs (*-vdb.xml) files and generating dynamic VDBs from existing VDB archives.</para>
		<section id="generate-vdb-archive-from-dynamic-vdb">
			<title>Generate VDB Archive</title>
			<para>To generate a VDB archive and models from a dynamic vdb (*-vdb.xml) file in your workspace:</para>
			<itemizedlist>
				<listitem>
					<para><emphasis role="bold">Step 1 </emphasis> - Import (or drag and drop) a dynamic vdb file into a model project or folder
					</para>
				</listitem>
				<listitem>
					<para><emphasis role="bold">Step 2 </emphasis> - Select the dynamic vdb file in the <emphasis role="bold">Model Explorer</emphasis>, then
						right-click and select the <emphasis role="bold">Modeling &gt; Generate Archive VDB and Models </emphasis> action.
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/screencaps/generate-archive-vdb-action.png"/>
							</imageobject>
						</mediaobject>
					</para>
				</listitem>
				<listitem>
					<para><emphasis role="bold">Step 3 </emphasis> - The first page of thw wizard will show the <emphasis role="bold">Dynamic VDB Contents</emphasis>
						 Verify the contents and click <emphasis role="bold">Next &gt;</emphasis>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/screencaps/generate-vdb-archive-page-1.png"/>
							</imageobject>
						</mediaobject>
					</para>
				</listitem>
				<listitem>
					<para><emphasis role="bold">Step 4 </emphasis> - On the second page, specify details and options for yor VDB archive 
						including actual VDB name, VDB archive file name and target location (project or folder). 
						 Click <emphasis role="bold">Generate</emphasis> to create the VDB archive and associated models in your target location.
						 Then click <emphasis role="bold">Finish</emphasis>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/screencaps/generate-vdb-archive-page-2.png"/>
							</imageobject>
						</mediaobject>
					</para>
				</listitem>
			</itemizedlist>
			<para>The generated VDB and XMI models will now be visible in the <emphasis role="bold">Model Explorer</emphasis> view.</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/screencaps/generated-vdb-and-models-from-xml.png"/>
				</imageobject>
			</mediaobject>
		</section>
		<section id="generate-dynamic-vdb-from-vdb-archive">
			<title>Generate Dynamic VDB</title>
			<para>To generate a dynamic VDB from a VDB archive (*.vdb) in your workspace:</para>
			<itemizedlist>
				<listitem>
					<para><emphasis role="bold">Step 1 </emphasis> - Select a VDB archive file in the <emphasis role="bold">Model Explorer</emphasis>, then
						right-click and select the <emphasis role="bold">Modeling &gt; Generate Dynamic VDB </emphasis> action.
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/screencaps/generate-dynamic-vdb-action.png"/>
							</imageobject>
						</mediaobject>
					</para>
				</listitem>
				<listitem>
					<para><emphasis role="bold">Step 2 </emphasis> - The first page of thw wizard will show the selected VDB archive file information.
						You can also set the VDB name adn version as well as specify the target location and actual file name (*-vdb.xml).
						 Click <emphasis role="bold">Next &gt;</emphasis>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/screencaps/generate-dynamic-vdb-page-1.png"/>
							</imageobject>
						</mediaobject>
					</para>
				</listitem>
				<listitem>
					<para><emphasis role="bold">Step 3 </emphasis> - On the second page, click the <emphasis role="bold">Generate</emphasis> button. The 
						XML contents will be displayed in the viewer which represents the same basic metadata from the origional VDB.
						 Click <emphasis role="bold">Generate</emphasis> to create the VDB archive and associated models in your target location.
						 Then click <emphasis role="bold">Finish</emphasis> to save the XML string to the file specified in Step 2.
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/screencaps/generate-dynamic-vdb-page-2.png"/>
							</imageobject>
						</mediaobject>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
	
</chapter>
