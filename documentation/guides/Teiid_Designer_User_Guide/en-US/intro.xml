<?xml version="1.0" encoding="UTF-8"?>

<chapter id="intro-chapter">
  <title>Introduction</title>
  
	<!-- <para><emphasis role="bold">Go To:  <ulink url="index.html">Table of Contents</ulink></emphasis></para>  -->
	
	<para>
	        The Teiid Designer User's Guide provides detailed descriptions of Teiid Designer features and functionality.
	</para>
  
	<section id="what-is-modeler">
		<title>What is Teiid Designer?</title>
		<para>
			Teiid Designer
			is an Eclipse-based graphical modeling tool for modeling, analyzing,
			integrating and testing multiple data sources to produce Relational,
			XML and Web Service Views that expose your business data.
		</para>
		<figure>
			<title>Teiid Designer</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/screencaps/designer-snapshot.png"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para><emphasis role="bold">Why Use Teiid Designer?</emphasis></para>

		<para>
			Teiid Designer
			is a visual tool that enables rapid, model-driven definition,
			integration and testing of data services without programming. With
			Teiid Designer
			, not only do you map from data sources to target formats using a
			visual tool, but you can also:
			<itemizedlist>
				<listitem>
					<para> resolve semantic differences</para>
				</listitem>
				<listitem>
					<para> create virtual data structures at a physical or logical
						level</para>
				</listitem>
				<listitem>
					<para> use declarative interfaces to integrate, aggregate, and
						transform the data on its way from source to a target format which
						is compatible and optimized for consumption by your applications
					</para>
				</listitem>
			</itemizedlist>
			This allows you to abstract the structure of the information you
			expose to and use in your applications from the underlying physical
			data structures. With
			Teiid Designer, data services are defined quickly, the resulting artifacts are easy
			to maintain and reuse, and all the valuable work and related metadata
			are saved for later reference.
		</para>
		<para>
			You can use Teiid Designer to integrate multiple sources, and access them using the common data
			access standards:
			<itemizedlist>
				<listitem>
					<para> Web Services / SOAP / XML</para>
				</listitem>
				<listitem>
					<para> JDBC / SQL</para>
				</listitem>
				<listitem>
					<para> ODBC / SQL</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>  

	<section id="metadata-overview">
		<title>Metadata Overview</title>
		<para>
		</para>
		<section id="what-is-metadata">
			<title>What is Metadata</title>
			<para>
				<emphasis role="bold">Metadata</emphasis>
				is data about data. A piece of metadata, called a meta object in the
				Teiid Designer, contains information about a specific information structure,
				irrespective of whatever individual data fields that may comprise that
				structure.
			</para>
			<para>
				Let’s use the example of a very basic database, an address book. Within
				your address book you certainly have a field or column for the ZIP code
				(or postal code number). Assuming that the address book services
				addresses within the United States, you can surmise the following about
				the column or field for the ZIP code:
				<itemizedlist>
					<listitem> <para>Named ZIPCode</para> </listitem>
					<listitem> <para>Numeric</para> </listitem>
					<listitem> <para>A string</para> </listitem>
					<listitem> <para>Nine characters long</para> </listitem>
					<listitem> <para>Located in the StreetAddress table</para> </listitem>
					<listitem> <para>Comprised of two parts: The first five digits represent the five ZIP code numbers, the final four represent the ZIP Plus Four digits if available, or 0000 if not</para> </listitem>
					<listitem> <para>Formatted only in integer numeric characters. Errors will result if formatted as 631410.00 or 6314q0000</para> </listitem>
				</itemizedlist>
			</para>
			<para>
				This definition represents metadata about the ZIP code data in the address book database. It abstracts information from the database itself and becomes useful to describe the content of your enterprise information systems and to determine how a column in one enterprise information source relates to another, and how those two columns could be used together for a new purpose
			</para>
			<para>
				You can think of this metadata in several contexts:
				<itemizedlist>
					<listitem> <para>What information does the metadata contain? (see <xref linkend="business-technical-metadata" />)</para> </listitem>
					<listitem> <para>What data does the metadata represent? (see <xref linkend="source-view-metadata" />)</para> </listitem>
					<listitem> <para>How will my organization use and manage this metadata? (see <xref linkend="design-runtime-metadata" />)</para> </listitem>
				</itemizedlist>
			</para>

			<para><emphasis role="bold">Editing Metadata vs. Editing Data</emphasis></para>

			<para> The Teiid Designer helps you to create and describe an abstract
				graphic representation of your data structure of your data in the
				original data sources. It also describes whether those data sources
				are composed of Relational databases, text files, data streams, legacy
				database systems, or some other information type.</para>
			<para> The Teiid Designer allows you to create, edit, and link these
				graphically-represented meta objects that are really a description of
				your data, and not the data itself.</para>
			<para> So when this documentation describes the process of creating,
				deleting, or editing these meta objects, <emphasis role="bold">remember</emphasis> that you are not, in
				fact, modifying the underlying data.</para>
				
			<para><emphasis role="bold">Metadata Models</emphasis></para>

			<para> A <emphasis role="bold">metadata model</emphasis> represents a collection of metadata information
				that describes a complete structure of data.</para>
			<para> In a previous example we described the field ZIPCode as a
				<emphasis role="bold">metadata object</emphasis> in an address book database. This <emphasis role="bold">meta object</emphasis>
				represents a single distinct bit of metadata information. We alluded
				to its parent table, StreetAddress. These <emphasis role="bold">meta objects</emphasis>, and others
				that would describe the other tables and columns within the database,
				would all combine to form a <emphasis role="bold">Source Metadata</emphasis> model for whichever
				enterprise information system hosts all the objects.</para>
			<para> You can have <emphasis role="bold">Source Models</emphasis> within your collection of <emphasis role="bold">metadata models</emphasis>
				These model physical data storage locations. You can also have
				<emphasis role="bold">View Models</emphasis>, which model the business view of the data. Each contains
				one type of metadata or another. For more information about difference
				   between Source and View metadata, (see <xref linkend="source-view-metadata" />).
			</para>
            <note>
			     <para> 
				    For detailed information about creating models from your metadata, see <xref linkend="models-101-section" />
			     </para>
            </note>
		</section>
		<section id="business-technical-metadata">
			<title>Business and Technical Metadata</title>
			<para>
				Metadata can include different types of information about a piece of
				data.
				<itemizedlist>
					<listitem>
						<para>
							<emphasis role="bold">Technical metadata</emphasis>
							describes the information required to access the data, such as
							where the data resides or the structure of the data in its native
							environment.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis role="bold">Business metadata</emphasis>
							details other information about the data, such as keywords related
							to the meta object or notes about the meta object.
						</para>
					</listitem>
				</itemizedlist>
			</para>
            <note>
			     <para>
				    The terms <emphasis role="bold">technical and business metadata,</emphasis> refer to the
				    content of the metadata, namely what type of information is contained
				    in the metadata. Don’t confuse these with the terms “physical” and
				    “view” metadata that indicate what the metadata represents. For more
				    information, (see <xref linkend="source-view-metadata" />).
			     </para>
			</note>
			<para><emphasis role="bold">Technical Metadata</emphasis></para>

			<para>
			Technical metadata represents information that describes how to access the data in its original 
			native data storage. Technical metadata includes things such as datatype, 
			the name of the data in the enterprise information system, and other information that 
			describes the way the native enterprise information system identifies the meta object
			</para>
			<para>
				Using our example of an address book database, the following represent the 
				technical metadata we know about the ZIP code column:
				<itemizedlist>
					<listitem> <para>Named ZIPCode</para> </listitem>
					<listitem> <para>Nine characters long</para> </listitem>
					<listitem> <para>A string</para> </listitem>
					<listitem> <para>Located in the StreetAddress table</para> </listitem>
					<listitem> <para>Uses SQL Query Language</para> </listitem>
				</itemizedlist>
				These bits of information describe the data and information required to 
				access and process the data in the enterprise information system.
			</para>

			<para><emphasis role="bold">Business Metadata</emphasis></para>

			<para> Business metadata represents additional information about a
				piece of data, not necessarily related to its physical storage in the
				enterprise information system or data access requirements. It can
				also represent descriptions, business rules, and other additional
				information about a piece of data.</para>
			<para>
				Continuing with our example of the ZIP Code column in the address
				book database, the following represents business metadata we may know
				about the ZIP code:
				<itemizedlist>
					<listitem>
						<para>The first five characters represent the five ZIP code
							numbers, the final four represent the ZIP Plus Four digits if
							available, or 0000 if not</para>
					</listitem>
					<listitem>
						<para>The application used to populate this field in the
							database strictly enforces the integrity of the data format</para>
					</listitem>
				</itemizedlist>
			</para>
			<para> Although the first might seem technical, it does not directly
				relate to the physical storage of the data. It represents a business
				rule applied to the contents of the column, not the contents
				themselves.</para>
			<para> The second, of course, represents some business information
				about the way the column was populated. This information, although
				useful to associate with our definition of the column, does not
				reflect the physical storage of the data.
			</para>
		</section>
		<section id="source-view-metadata">
			<title>Source and View Metadata</title>
			<para> In addition to the distinction between business and technical
				metadata, you should know the difference between <emphasis role="bold">Source Metadata and
				View Metadata</emphasis>.</para>
			<para> <emphasis role="italic">Source and View metadata refer to what the metadata represents,
				not its content</emphasis>.</para>
			<para> <emphasis role="bold">Source Metadata</emphasis> directly represents metadata for an enterprise
				information system and captures exactly where and how the data is
				maintained. Source Metadata sounds similar to technical metadata, but
				Source Metadata can contain both technical and business metadata. When
				you model Source Metadata, you are modeling the data that your
				enterprise information systems contain.</para>
			<para> View Metadata, on the other hand, represent tailored views that
				<emphasis role="bold">transform</emphasis> the <emphasis role="bold">Source Metadata</emphasis> into the terminology and domain of
				different applications. <emphasis role="bold">View Metadata</emphasis>, too, can contain both technical
				and business metadata. When you model <emphasis role="bold">View Metadata</emphasis>, you’re modeling
				the data as your applications (and your enterprise) ultimately use it.
			</para>
			
			<para><emphasis role="bold">Modeling Your Source Metadata</emphasis></para>

			<para>
				When you model the <emphasis role="bold">Source Metadata</emphasis> within your enterprise information
				systems, you capture some detailed information, including:
				<itemizedlist>
					<listitem>
						<para>Identification of datatype</para>
					</listitem>
					<listitem>
						<para>Storage formats</para>
					</listitem>
					<listitem>
						<para>Constraints</para>
					</listitem>
					<listitem>
						<para>Source-specific locations and names</para>
					</listitem>
				</itemizedlist>
			</para>
			<para> The <emphasis role="bold">Source Metadata</emphasis> captures this detailed technical metadata
				to provide a map of the data, the location of the data, and how you
				access it.</para>
			<para> This collection of <emphasis role="bold">Source Metadata</emphasis> comprises a direct mapping
				of the information sources within your enterprise. If you use the
				Teiid Designer Server for information integration, this technical
				metadata plays an integral part in query resolution.</para>
			<para> For example, our ZIPCode column and its parent table
				StreetAddress map directly to fields within our hypothetical address
				book database.</para>
			<para> To extend our example, we might have a second source of
				information, a comma-separated text file provided by a marketing
				research vendor. This text file can supply additional demographic
				information based upon address or ZIP code. This text file would
				represent another Enterprise Information System (EIS), and the meta objects in its Source Model would
				describe each comma-separated value.
			</para>

			<para><emphasis role="bold">Modeling Your View Metadata</emphasis></para>

			<para> When you create <emphasis role="bold">View Metadata</emphasis>, you are not describing the
				nature of your physical data storage. Instead, you describe the way
				your enterprise uses the information in its day-to-day operations.
			</para>
			<para>
				<emphasis role="bold">View Metadata</emphasis> derives its classes and attributes from other metadata.
				You can derive <emphasis role="bold">View Metadata</emphasis> from <emphasis role="bold">Source Metadata</emphasis> that describes the
				ultimate sources for the metadata or even from other View Metadata.
				However, when you model <emphasis role="bold">View Metadata</emphasis>, you create special “views” on
				your existing enterprise information systems that you can tailor to
				your business use or application expectations. This <emphasis role="bold">View Metadata</emphasis>
				offers many benefits:
				<itemizedlist>
					<listitem>
						<para>You can expose only the information relevant to an
							application. The application uses this <emphasis role="bold">View Metadata</emphasis> to resolve
							its queries to the ultimate physical data storage.</para>
					</listitem>
					<listitem>
						<para>You can add content to existing applications that require
							different views of the data by adding the <emphasis role="bold">View Metadata</emphasis> to the
							existing <emphasis role="bold">View Metadata</emphasis> that application uses. You save time and
							effort since you do not have to create new models nor modify your
							existing applications.</para>
					</listitem>
					<listitem>
						<para>Your applications do not need to refer to specific
							physical enterprise information systems, offering flexibility and
							interchangeability. As you change sources for information, you do
							not have to change your end applications.</para>
					</listitem>
					<listitem>
						<para>The <emphasis role="bold">View Metadata</emphasis> models document the various ways your
							enterprise uses the information and the different terminology that
							refers to that information. They do so in a central location.
						</para>
					</listitem>
				</itemizedlist>
			</para>
			<para> Our example enterprise information sources, the address book
				database, and the vendor-supplied comma-delimited text file, reside
				in two different native storage formats and therefore have two Source
				Metadata models. However, they can represent one business need: a
				pool of addresses for a mass mailing.</para>
			<para> By creating a <emphasis role="bold">View Metadata</emphasis> model, we could accurately show
				that this single View Table, the AddressPool, contains information
				from the two enterprise information systems. The <emphasis role="bold">View Metadata</emphasis> model
				not only shows from where it gets the information, but also the SQL
				operations it performs to select its information from its source
				models.</para>
			<para> This <emphasis role="bold">View Metadata</emphasis> can not only reflect and describe how your
				organization uses that information, but, if your enterprise uses the
				Teiid Designer Server, your applications can use the <emphasis role="bold">View Metadata</emphasis> to
				resolve queries.</para>
			<para> To create this <emphasis role="bold">View Metadata</emphasis>, you create a view and define a
				<emphasis role="bold">transformation</emphasis> for that view, a special query that enables you to
				select information from the source (or even other view) metadata
				models. For more information, see “<xref linkend="transformation-editor-section" />.”
			</para>

			<para><emphasis role="bold">Metadata Transformations</emphasis></para>

			<para>
			By modeling View Metadata, you can illustrate the business view of your enterprise information sources. View Metadata models not only describe that business view, but also illustrate how the meta objects within the View Metadata models derive their information from other metadata models.
			</para>
			<para>
			Let’s return to the example of our address book database and the vendor’s comma-separated list. We want to generate the View Metadata model, Address Pool, from these enterprise information systems.
			</para>
			<figure id="address-transform">
				<title>Data Flow for View Transformations</title>
				<mediaobject><imageobject>
					<imagedata fileref="images/screencaps/address-pool-transformation.png" align="center" />
				</imageobject></mediaobject>
			</figure>
			<para>
			The transformation that joins these metadata models to create the virtual Address Pool metadata model contains a SQL query, called a union, that determines what information to draw from the source metadata and what to do with it.
			</para>
			<para>
			The resulting Address Pool contains not only the address information from our Address Book database, but also that from our vendor-supplied text file.
			</para>

			<para><emphasis role="bold">SQL in Transformations</emphasis></para>

			<para>
			Transformations contain SQL queries that SELECT the appropriate attributes from the information sources. 
			</para>
			<para>
			For example, from the sources the transformation could select relevant address columns, including first name, last name, street address, city, state, and ZIP code. Although the metadata models could contain other columns and tables, such as phone number, fax number, e-mail address, and Web URL, the transformation acts as a filter and populates the Address Pool metadata model with only the data essential to building our Address Pool.
			</para>
			<para>
			You can add other SQL logic to the transformation query to transform the data information. For example, the address book database uses a nine-character string that represents the ZIP Plus Four. The transformation could perform any SQL-supported logic upon the ZIPCode column to substring this information into the format we want for the Address Pool View metadata model.
			</para>

			<para><emphasis role="bold">Mapping XML Transformations</emphasis></para>

			<para>
			When you model View Metadata, you can also create a View XML Document model. This View Document lets you select information from within your other data sources, just like a regular View Metadata model, but you can also map the results to tags within an XML document.
			</para>
			<figure id="address-xml-transform">
				<title>Data Flow for XML Transformations</title>
				<mediaobject><imageobject>
					<imagedata fileref="images/screencaps/address-pool-xml-transformation.png" align="center" />
				</imageobject></mediaobject>
			</figure>
			<para>
			In this example, the Address Pool View Metadata model still selects its information from the Address Book Database and the Vendor Text File, but it also maps the resulting columns into tags in the Address XML document.
			</para>
		</section>
	</section>
	<section id="models-101-section">
		<title>It's all in the Modeling...</title>
		
        <section id="what-are-models">
		  <title>What Are Models?</title>
		
		  <para> A model is a representation of a set of information constructs.
			A familiar model is the relational model, which defines tables
			composed of columns and containing records of data. Another familiar
			model is the XML model, which defines hierarchical data sets.</para>
		  <para> In Teiid Designer, models are used to define the entities, and
			relationships between those entities, required to fully define the
			integration of information sets so that they may be accessed in a
			uniform manner, using a single API and access protocol. The file
			   extension used for these models is <filename>.xmi</filename> ( Example:
			NorthwindOracle.xmi ) which adheres to the XMI syntax defined by the
			OMG.</para>
		  <para> Below is an example of the partial contents of a model file.
		  </para>
		  <figure>
			<title>Sample Model File</title>
			<mediaobject><imageobject>
				<imagedata fileref="images/screencaps/sample-model-file.png"/>
			</imageobject></mediaobject>
		  </figure>
		  <note>
		  <para> Model files should never be modified "by hand". While it is
			possible to do so, there is the possibility that you may corrupt the
			file such that it cannot be used within Teiid Designer system.</para>
		  </note>
		  <para> The fundamental models in Teiid Designer define the structural and
			data characteristics of the information contained in data sources.
			These are referred to as source models (represented by <inlinemediaobject>
				<imageobject>
					<imagedata fileref="images/icons/model.png"/>
				</imageobject>
			</inlinemediaobject> ). Teiid Designer
			uses the information in source models to federate the information in
			multiple sources, so that from a user's viewpoint these all appear to
			be in a single source.</para>
		  <figure>
			<title>Model Internals</title>
			<mediaobject><imageobject>
				<imagedata fileref="images/screencaps/model-internals.png"/>
			</imageobject></mediaobject>
		  </figure>
		  <para> In addition to source models, Teiid Designer provides the ability to
			define a variety of view models(represented by <inlinemediaobject>
				<imageobject>
					<imagedata fileref="images/icons/view-model.png"/>
				</imageobject>
			</inlinemediaobject> ). These can be used to
			define a layer of abstraction above the physical (or source) layer, so
			that information can be presented to end users and consuming
			applications in business terms rather than as it is physically stored.
			Views are mapped to sources using transformations between models.
			These business views can be in a variety of forms:</para>
		  <itemizedlist>
			<listitem> <para>Relational Tables and Views</para> </listitem>
			<listitem> <para>XML</para> </listitem>
			<listitem> <para>Web services</para> </listitem>
			<listitem> <para>Functions</para> </listitem>
		  </itemizedlist>
		  <para>For full list of supported model types see <xref linkend="newmodels-chapter" /></para>
		  <para> A third model type, logical, provides the ability to define
			models from a logical or structural perspective.</para>
        </section>
        
        <section id="model-defined">
		  <title>How is a Model Defined?</title>

    		<para>
	   	       Models are defined using Teiid Designer in various ways:
		  </para>
		  <itemizedlist>
			 <listitem> 
				  <para>Created via importing source data characteristics. 
					(see <xref linkend="importers-chapter" />)</para> 
			 </listitem>
             <listitem> 
		          <para>Manual creation via <xref linkend="newmodels-chapter" /></para> 
			 </listitem>
			 <listitem> 
				  <para>Transforming or copying from one model into another
					 (see <xref linkend="newmodels-chapter" /> options)</para> 
			 </listitem>
			 <listitem> <para>Various custom actions</para></listitem>
		  </itemizedlist>
        </section>
        
        <section id="guiding-through-the-process">
            <title>Guiding through the process</title>
            <para>
                To make the process of using Teiid Designer to build models more as easy as
                posssible, a guides view (<xref linkend="guides-view" />) has been introduced. 
                It provides action sets which bring together the actions necessary to 
                develop models for specific use-cases. Action sets are available for the following
                scenerios: 
            </para>
            <itemizedlist>
                <listitem>Consume a SOAP Web Service</listitem>
                <listitem>Create a REST Web Service</listitem>
                <listitem>Model Flat File Source (a text file)</listitem>
                <listitem>Model JDBC Data Source</listitem>
                <listitem>Model Local XML File Source</listitem>
                <listitem>Model Remote XML File Source</listitem>
                <listitem>Modell Teiid Data Source (deployed on server)</listitem>
                <listitem>Teiid Server Actions</listitem>
            </itemizedlist>
        </section>
        
        <section id="intro-to-multiple-teiid-clients">
            <title>Targeting Your Teiid Submoduler</title>
            <para>
                Like Teiid Designer, the Teiid runtime is under continuous development and as such
                multiple versions have been and are being released. Due to changes in both its
                code and the underlying JBoss server, the versions are not always backward 
                compatible. Teiid Designer provides Teiid runtime validation for VDBs based on server versions.
                New models must be compatible with their targeted server version hence the 
                correct server version must be selected prior to creating them.            </para>
            <para>
                To aid with selection of the correct server version, two changes have been made 
                to Teiid Designer:
                <itemizedlist>
                    <listitem>
                        A <emphasis role="bold">preference</emphasis> for the targeted server 
                        version that new models will be based on;
                    </listitem>
                    <listitem>
                        The concept of the <emphasis role="bold">default server</emphasis> has 
                        been extended so that it will determine the targeted server version of
                        new models (superceding the preference).
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        
        <section id="model-classes-and-types">
		  <title>Model Classes and Types</title>
		
		  <para>Teiid Designer can be used to model a variety of classes of
			models. Each of these represent a conceptually different
			classification of models.</para>
		  <itemizedlist>
            <listitem> 
			    <para><emphasis role="bold">Relational</emphasis> - Model data that can be represented in table –
					columns and records – form. Relational models can represent structures
					found in relational databases, spreadsheets, text files, or simple Web
					services.</para>
			</listitem>
			<listitem> 
				<para><emphasis role="bold">XML</emphasis> - Model that represents the basic structures of XML documents.
					These can be “backed” by XML Schemas. XML models represent nested
					structures, including recursive hierarchies.</para>
			</listitem>
			<listitem> 
				<para><emphasis role="bold">XML Schema</emphasis> - W3C
					standard for formally defining the structure and constraints of XML
					documents, as well as the datatypes defining permissible values in XML
					documents.</para>
			</listitem>
			<listitem> 
				<para><emphasis role="bold">Web Services</emphasis> - which define Web service
					interfaces, operations, and operation input and output parameters (in
					the form of XML Schemas).</para>
			</listitem>
			<listitem> 
				<para><emphasis role="bold">Function</emphasis> - The Function metamodel supports the capability to provide
					user-defined functions, including binary source jars, to use in custom transformation SQL statements.</para>
			</listitem>
		  </itemizedlist>
        </section>

        <section id="the-virtual-database">
    		<title>The Virtual Database</title>

    		<para>The critical artifact that <emphasis role="bold">Teiid Designer</emphasis> is intended to manage is the
	   		  <emphasis role="bold">VDB</emphasis>, or <emphasis role="bold">Virtual DataBase</emphasis>. Through the 
	   		  Teiid server, VDB's behave like standard relational database schema which can be connected to, queried and 
	   		  updated based on how the VDB is configured. Since VDB's are just databases once they are deployed, they 
	   		  can be used as sources to other view model transformations. This allows creating and deploying re-usable 
	   		  or common VDB's in multiple layers depending on your business needs. </para>
	   		  <para>Starting in Teiid Designer 9.0, support was added for converting between archive (ZIP) VDBs and simple 
	   		  Dynamic VDB XML files. Dynamic VDBs provide users to define their source and view metadata via 
	   		  Teiid DDL statements. This capability allows some users to maintain a simpler version of their VDBs 
	   		  in a source control system.  (See the <xref linkend="vdb-dynamic-import-export"/> section for more details) </para>
			
		    <section id="vdb-content-and-structure">
    			<title>VDB Content and Structure</title>
    			In Designer, the VDB file names use a "<emphasis role="bold">.vdb</emphasis>" file extension. 
    			VDBs are structurally just ZIP archive files containing 3 folders:
				<itemizedlist>
					<listitem>
						<para> META-INF</para>
						<itemizedlist>
							<listitem>
								<para> contains "<emphasis role="bold">vdb.xml</emphasis>" definition file</para>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<para> runtime-inf</para>
						<itemizedlist>
							<listitem>
								<para> contains a binary INDEX file for each model included in your VDB. Note that
								these INDEX files represent the actual runtime metadata and is an optimized subset
								of data from your design-time metadata in your models.</para>
							</listitem>
						</itemizedlist>
					</listitem>
					<listitem>
						<para> &lt;project folder name&gt;</para>
						<itemizedlist>
							<listitem>
								<para> contains of the models you will be adding in the VDB Editor (i.e. *.xmi and *.xsd files)</para>
							</listitem>
						</itemizedlist>
					</listitem>
				</itemizedlist>
				<para>When deployed, the metadata is consumed by Teiid in order to create the necessary runtime 
					metadata for your model definitions. </para>
				<para>The vdb.xml file contains:</para>
				<itemizedlist>
					<listitem>
						<para> VDB name, version, properties</para>
					</listitem>
					<listitem>
						<para> contained model information (name, translator name, connection info)</para>
					</listitem>
					<listitem>
						<para> translator info</para>
					</listitem>
					<listitem>
						<para> data role definitions for the referenced models</para>
					</listitem>
					<listitem>
						<para> import VDB references</para>
					</listitem>
				</itemizedlist>
				<para>The <emphasis role="bold">vdb.xml</emphasis> file example below highlights the basic model information.</para>
                <note><para>The VIRTUAL and PHYSICAL &lt;model&gt; elements containing property references to the INDEX files as well as the 
					&lt;source&gt; element info for the PHYSICAL (aka source) model EU_CustomerAccounts.xmi.</para>
                </note>
				<synopsis>
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;vdb version="1" name="Financials"&gt;
    &lt;model visible="true" type="VIRTUAL" name="US_CustomerAccounts" path="/Financials/US_CustomerAccounts.xmi"&gt;
        &lt;property value="4097408696" name="checksum"/&gt;
        &lt;property value="Relational" name="modelClass"/&gt;
        &lt;property value="false" name="builtIn"/&gt;
        &lt;property value="1592679058.INDEX" name="indexName"/&gt;
        &lt;property value="/Financials/US_CustomerAccounts.xmi" name="imports"/&gt;
    &lt;/model&gt;
    &lt;model visible="true" type="PHYSICAL" name="EU_CustomerAccounts" path="/Financials/EU_CustomerAccounts.xmi"&gt;
        &lt;property value="525566235" name="checksum"/&gt;
        &lt;property value="Relational" name="modelClass"/&gt;
        &lt;property value="false" name="builtIn"/&gt;
        &lt;property value="1119071590.INDEX" name="indexName"/&gt;
        &lt;source translator-name="postgresql" connection-jndi-name="EU_CustomerAccounts" name="EU_CustomerAccounts"/&gt;
    &lt;/model&gt;
&lt;/vdb&gt; 
				</synopsis>
				<para>Fortunately, Teiid Designer simplifies the management of your VDBs by providing a dedicated 
					VDB Editor which maintains a consistent, valid vdb.xml file for you and assists in 
					synchronizing your workspace models with any related models in your VDB.
					(See the <xref linkend="vdb-editor-section" /> section)</para>
    		</section>
        </section>			

        <section id="model-validation">
		  <title>Model Validation</title>
		
		  <para>Models must be in a valid state in order to be used for data access. 
			Validation of a single model means that it must be in a self-consistent and 
			complete state, meaning that there are no "missing pieces" and 
			no references to non-existent entities. Validation of multiple models 
			checks that all inter-model dependencies are present and resolvable.</para>
		  <para>Modle and VDB validation is scoped to a model project.</para>
		  <para>Models must always be validated when they are deployed in a VDB for data 
			access purposes.</para>
		  <para>Teiid Designer will automatically validate all models 
			whenever they are saved.</para>
          <note><para>
            The "Project > Build Automatically" menu option 
			must be checked. When editing models, the editor tabs will display a "*" 
			to indicate that the model has unsaved changes.
		  </para></note>
        </section>
        
        <section id="testing-your-models">
		  <title>Testing Your Models</title>
		
		  <para> Designing and working with data is often much easier when you can
			see the information you're working with. The Teiid Designer's 
			<emphasis role="bold">Preview Data</emphasis>
			feature makes this possible and allows you to instantly preview the
			information described by any object, whether it's a physical table or a
			virtual view. In other words, you can test the views with actual data
			by simply selecting the table, view, procedure or XML document. The
			preview functionality insures that data access behavior in Teiid Designer will
			reliably match when the VDB is deployed to the Server.  For more info on server
			management see <xref linkend="server-management-chapter" /></para> 

			<para> Previewing information is a fast and easy way to sample the data. Of course, to
			run more complicated queries like what your application likely uses,
			simply execute the VDB in Teiid Designer and type in any query or SQL
			statement.</para>
		  <para> After creating your models, you can test them by using the
			<emphasis role="bold">Preview Data</emphasis> action <inlinemediaobject>
					<imageobject>
						<imagedata fileref="images/icons/preview-data.png"/>
					</imageobject>
				</inlinemediaobject>. By selecting a desired table object and
			executing the action, the results of a simple query will be displayed
			in the Data Tools SQL Results view. This action is accessible throughout the
			Teiid Designer in various view toolbars and context menus.</para>
		  <para> Previewable objects include:</para>
		  <itemizedlist>
			<listitem>
				<para>Relational table or view, including tables involving
					access patterns.</para>
			</listitem>
			<listitem>
				<para>Relational procedure.</para>
			</listitem>
			<listitem>
				<para>Web Service operation.</para>
			</listitem>
			<listitem>
				<para>XML Document staging table.</para>
			</listitem>
		  </itemizedlist>
		  <note>
			<para>If attempting to preview a relational access pattern, a web service operation or a relational procedure
				with input parameters, a dialog will request values for required parameters.</para>
		  </note>
        </section>
		<section id="intro-to-model-extensions">
			<title>Model Object Extensions</title>
			
			<para>Teiid Designer in conjunction with Teiid provides an extensible framework to define 
				custom properties for model objects over-and-above what is defined in the metamodel. These
				custom property values are added to your VDB and included in your runtime metadata. This additional 
				metadata is available to use in your custom translators for both source query manipulation as well as
				adjusting your result set data being returned.
			</para>
			<para>In the 7.6 release, Teiid Designer introduces a new <emphasis role="bold">Model Extension Definition (MED)</emphasis> framework that will replace the current EMF-based 
				Model Extension metamodel in a later 8.0 release.
			</para>
			<para>This new MED framework provides the following improvements:
				<itemizedlist>
					<listitem>
						<para> Eliminate need for separate EMF metamodel. </para>
					</listitem>
					<listitem>
						<para> Simpler approach including reduction of extendable metamodels and metamodel objects (Relational, Web Services,
							XML Document, User Defined Functions) and replacing EMF terminology with basic object types.
						 </para>
					</listitem>
					<listitem>
						<para> Allows metamodels to be extended by multiple MEDs</para>
					</listitem>
					<listitem>
						<para> MEDs are stored in models so no added dependency needed in VDB</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>Also see:  <xref linkend="model-object-extension-properties-section"/> and 
				<xref linkend="model-extension-definition-editor-section"/>.
			</para>
			<section id="model-extension-definition">
				<title>Model Extension Definition (MED)</title>
				<para>The purpose of a MED is to define one or more sets of extension properties. Each set of extension properties pertains 
					to one model object type (or metaclass). Each MED consists of the following:
					<itemizedlist>
						<listitem>
							<para> <emphasis role="bold">Namespace Prefix</emphasis> - a unique identifier. Typically only a small number of 
								letters and can be used as an abbreviation for the namespace URI. </para>
						</listitem>
						<listitem>
							<para> <emphasis role="bold">Namespace URI</emphasis> - a unique URI.</para>
						</listitem>
						<listitem>
							<para> <emphasis role="bold">Extended Metamodel URI (Model Class)</emphasis> - the metamodel URI that is being extended. Each 
								metamodel URI also has model class and that is typically what is shown in the Designer. The model classes 
								supported for extension are:  <emphasis role="bold">Relational, Web Service, XML Document, and Function</emphasis>.
							</para>
						</listitem>
						
						<listitem>
							<para> <emphasis role="bold">Version</emphasis> - (currently not being used)</para>
						</listitem>
						<listitem>
							<para> <emphasis role="bold">Description</emphasis> - an optional description or purpose.</para>
						</listitem>
						<listitem>
							<para> <emphasis role="bold">Extended Model Object Types (Metaclasses)</emphasis> - a set of model object types, or metaclasses, 
								that have extension properties defined.</para>
						</listitem>
						<listitem>
							<para> <emphasis role="bold">Properties</emphasis> - the extension property definitions grouped by model object type.</para>
						</listitem>
					</itemizedlist>
				</para>
				<para>A <emphasis role="bold">MED</emphasis> file is an XML file with an extension of "mxd." A MED schema file (see attached modelExtension.xsd file) is 
					used to validate a MED file. Here is a sample MED file:
				</para>
				<synopsis>
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;modelExtension xmlns:p="http://org.teiid.modelExtension/2011"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	metamodelUri="http://www.metamatrix.com/metamodels/Relational"
    	namespacePrefix="mymodelextension" namespaceUri="org.my.extension.mymodelextension"
    	version="1"
    	xsi:schemaLocation="http://org.teiid.modelExtension/2011 modelExtension.xsd"
    	xmlns="http://org.teiid.modelExtension/2011"&gt;
    &lt;p:description&gt;This is my model extension&lt;/p:description&gt;
    &lt;p:extendedMetaclass name="com.metamatrix.metamodels.relational.impl.BaseTableImpl"&gt;
        &lt;p:property advanced="false" index="true" masked="false" name="copyable" required="false" type="boolean"&gt;
            &lt;p:description locale="en_US"&gt;Indicates if table can be copied&lt;/p:description&gt;
            &lt;p:display locale="en_US"&gt;Copyable&lt;/p:display&gt;
        &lt;/p:property&gt;
    &lt;/p:extendedMetaclass&gt;
&lt;/modelExtension&gt;
				</synopsis>
				<para>The <emphasis>MED Registry</emphasis> is where the MEDs used by Designer are stored. MED files can be edited
					by opening the .mxd file in the <xref linkend="model-extension-definition-editor-section" />.</para>
			</section>
			<section>
				<title>Model Extension Definition Registry (MED Registry)</title>
				<para>A MED registry keeps track of all the MEDs that are registered in a workspace. Only registered MEDs can be used to extend a model. 
					There are 2 different types of MEDs stored in the registry:
					<itemizedlist>
						<listitem>
							<para> <emphasis role="bold">Built-In MED</emphasis> - these are registered during Designer installation. These 
								MEDs cannot be updated or unregistered by the user.</para>
						</listitem>
						<listitem>
							<para> <emphasis role="bold">User-Defined MED</emphasis> - these are created by the user. These MEDs can be 
								updated, registered, and unregistered by the user.</para>
						</listitem>
					</itemizedlist>
				</para>
				<para>The MED Registry state is persisted and is restored each time a new session is started.</para>
			</section>
		</section>
	</section>


</chapter>
