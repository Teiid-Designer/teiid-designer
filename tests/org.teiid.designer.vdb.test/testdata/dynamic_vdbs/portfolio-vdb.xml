<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

<!--
    The Portfolio Example Vdb
-->
<!--
    Another comment for testing purposes
-->
<vdb name="Portfolio" version="1">
 
    <!--
        The defaults for attributes included for test comparison purposes
    -->
 
    <description>The Portfolio Dynamic VDB</description>
 
    <!--
      Setting to use connector supplied metadata. Can be "true" or "cached".
      "true" will obtain metadata once for every launch of Teiid.
      "cached" will save a file containing the metadata into
      the deploy/<vdb name>/<vdb version/META-INF directory
    -->
    <property name="UseConnectorMetadata" value="true" />
 
 
    <!--
      Each model represents a access to one or more sources.
      The name of the model will be used as a top level schema name
      for all of the metadata imported from the connector.

      NOTE: Multiple models, with different import settings, can be bound to
      the same connector binding and will be treated as the same source at
      runtime.
    -->
    <model name="MarketData">
        <!--
            Each source represents a translator and data source. There are
            pre-defined translators, or you can create one.
        -->
        <source name="text-connector" translator-name="file" connection-jndi-name="java:/marketdata-file"/>
    </model>
 
    <model name="Accounts">
        <!--
          JDBC Import settings

          importer.useFullSchemaName directs the importer to drop the source
          schema from the Teiid object name, so that the Teiid fully qualified name
          will be in the form of <model name>.<table name>
        -->
        <property name="importer.useFullSchemaName" value="false"/>
 
         <!--
            This connector is defined to reference the H2 localDS
          -->
 
        <source name="h2-connector" translator-name="h2" connection-jndi-name="java:/accounts-ds"/>
 
    </model>
 
    <model name="PersonalValuations">
        <!-- importer header row number property -->
        <property name="importer.headerRowNumber" value="1"/>
        <!-- import excel file name property -->
        <property name="importer.ExcelFileName" value="otherholdings.xls"/>
        <source name="excelconnector" translator-name="excel"  connection-jndi-name="java:/excel-file"/>
        <!-- The DDL for accessing an excel spreadsheet -->
        <metadata type="DDL"><![CDATA[
 
        SET NAMESPACE 'http://www.teiid.org/translator/excel/2014' AS teiid_excel;
 
        CREATE FOREIGN TABLE Sheet1 (
        ROW_ID integer OPTIONS (SEARCHABLE 'All_Except_Like', "teiid_excel:CELL_NUMBER" 'ROW_ID'),
        ACCOUNT_ID integer OPTIONS (SEARCHABLE 'Unsearchable', "teiid_excel:CELL_NUMBER" '1'),
        PRODUCT_TYPE string OPTIONS (SEARCHABLE 'Unsearchable', "teiid_excel:CELL_NUMBER" '2'),
        PRODUCT_VALUE string OPTIONS (SEARCHABLE 'Unsearchable', "teiid_excel:CELL_NUMBER" '3'),
        CONSTRAINT PK0 PRIMARY KEY(ROW_ID)
        ) OPTIONS ("teiid_excel:FILE" 'otherholdings.xls', "teiid_excel:FIRST_DATA_ROW_NUMBER" '2');
     
         ]]></metadata>
    </model>
 
    <model name="Stocks" type="VIRTUAL">
        <metadata type="DDL"><![CDATA[
                 
        CREATE VIEW StockPrices (
            symbol string,
            price bigdecimal
            )
            AS 
               SELECT SP.symbol, SP.price
                FROM (EXEC MarketData.getTextFiles('*.txt')) AS f,
                    TEXTTABLE(f.file COLUMNS symbol string, price bigdecimal HEADER) AS SP;
         
         
        CREATE VIEW Stock (
            product_id integer,
            symbol string,
            price bigdecimal,
            company_name   varchar(256)
            )
            AS
                SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME
                    FROM StockPrices AS S, Accounts.PRODUCT AS A
                    WHERE S.symbol = A.SYMBOL;
 
                  
        ]]></metadata>
    </model>
 
    <model name="StocksMatModel" type="VIRTUAL">
        <metadata type="DDL"><![CDATA[
            CREATE view stockPricesMatView
            (
                product_id integer,
                symbol string,
                price bigdecimal,
                company_name   varchar(256)
            ) OPTIONS (MATERIALIZED 'TRUE', UPDATABLE 'TRUE',
               MATERIALIZED_TABLE 'Accounts.h2_stock_mat')
            AS SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME
                    FROM Stocks.StockPrices AS S, Accounts.PRODUCT AS A
                    WHERE S.symbol = A.SYMBOL;
            ]]>
        </metadata>
    </model>  
 
    <!-- Example data role -->
    <data-role name="ReadWrite">
        <!-- Useful to provide comments -->
        <description>Allow Reads and Writes to tables and procedures</description>
 
        <!-- Permission on Accounts table -->
        <permission>
            <!-- Resource name referenced by permission -->
            <resource-name>Accounts</resource-name>
            <!-- Deny create -->
            <allow-create>false</allow-create>
            <!-- Allow read -->
            <allow-read>true</allow-read>
            <!-- Allow update -->
            <allow-update>true</allow-update>
            <allow-delete>false</allow-delete>
            <allow-execute>false</allow-execute>
            <allow-alter>false</allow-alter>
        </permission>

        <!-- can see any state Account but New York -->
        <permission>
            <resource-name>Accounts.Customer</resource-name>
            <!-- Permission using a condition -->
            <condition>state &lt;&gt; 'New York'</condition>
        </permission>

        <permission>
            <resource-name>Accounts.Customer.SSN</resource-name>
            <!-- Permission mask -->
            <mask order="0">null</mask>
        </permission>

        <!--
            This role must defined in the JAAS security domain, the sample UserRolesLoginModules based roles file provided
            in this sample directory. copy these "teiid-security-roles.properties" and "teiid-security-users.proeprties"
            into "<jboss-install>/modules/org/jboss/teiid/conf" directory and replace the old ones.
        -->
        <mapped-role-name>supervisor</mapped-role-name>

        <!-- Secondary mapped role name -->
        <mapped-role-name>dept-supervisor</mapped-role-name>

    </data-role>
</vdb>