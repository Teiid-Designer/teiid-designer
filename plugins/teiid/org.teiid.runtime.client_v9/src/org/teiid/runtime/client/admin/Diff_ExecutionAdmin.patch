diff --git a/plugins/teiid/org.teiid.runtime.client/src/org/teiid/runtime/client/admin/ExecutionAdmin.java b/plugins/teiid/org.teiid.runtime.client/src/org/teiid/runtime/client/admin/ExecutionAdmin.java
index 70a8369..095c7e6 100644
--- a/plugins/teiid/org.teiid.runtime.client/src/org/teiid/runtime/client/admin/ExecutionAdmin.java
+++ b/plugins/teiid/org.teiid.runtime.client/src/org/teiid/runtime/client/admin/ExecutionAdmin.java
@@ -16,11 +16,9 @@
 import java.sql.Connection;
 import java.sql.Driver;
 import java.sql.SQLException;
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
@@ -38,8 +36,6 @@
 import org.jboss.ide.eclipse.as.management.core.JBoss7ManagerUtil;
 import org.jboss.ide.eclipse.as.management.core.ModelDescriptionConstants;
 import org.teiid.adminapi.Admin;
-import org.teiid.adminapi.PropertyDefinition;
-import org.teiid.adminapi.Translator;
 import org.teiid.adminapi.VDB;
 import org.teiid.core.util.ArgCheck;
 import org.teiid.designer.annotation.AnnotationUtils;
@@ -61,6 +57,8 @@
 import org.teiid.jdbc.TeiidDriver;
 import org.teiid.runtime.client.Messages;
 import org.teiid.runtime.client.TeiidRuntimePlugin;
+import org.teiid.runtime.client.admin.v8.Admin8Factory.AdminImpl;
+import org.teiid.runtime.client.admin.v8.AdminUtil;
 
 
 
@@ -77,14 +75,11 @@
 
     private final Admin admin;
     protected Map<String, ITeiidTranslator> translatorByNameMap;
-    protected Collection<String> dataSourceNames;
-    protected Map<String, ITeiidDataSource> dataSourceByNameMap;
-    protected Set<String> dataSourceTypeNames;
     private final EventManager eventManager;
     private final ITeiidServer teiidServer;
     private final AdminSpec adminSpec;
     private Map<String, ITeiidVdb> teiidVdbs;
-    private final ModelConnectionMatcher connectionMatcher;
+    private final ConnectionManager connectionManager;
 
     private boolean loaded = false;
     private boolean refreshing = false;
@@ -104,7 +99,7 @@
         this.teiidServer = teiidServer;
         this.adminSpec = AdminSpec.getInstance(teiidServer.getServerVersion());
         this.eventManager = teiidServer.getEventManager();
-        this.connectionMatcher = new ModelConnectionMatcher();
+        this.connectionManager = new ConnectionManager(teiidServer, ((AdminImpl)this.admin).getConnection());
         
         init();
     }
@@ -126,7 +121,8 @@
 
         this.teiidServer = teiidServer;
         this.eventManager = teiidServer.getEventManager();
-        this.connectionMatcher = new ModelConnectionMatcher();
+//      this.connectionMatcher = new ModelConnectionMatcher();
+        this.connectionManager = new ConnectionManager(teiidServer, ((AdminImpl)this.admin).getConnection());
 
         init();
     }
@@ -143,28 +139,26 @@
 
     @Override
     public boolean dataSourceExists( String name ) {
-        // Check if exists, return false
-        if (this.dataSourceNames.contains(name)) {
-            return true;
-        }
-
-        return false;
+    	return connectionManager.dataSourceExists(name);
     }
 
     @Override
     public void deleteDataSource( String dsName ) throws Exception {
         // Check if exists, return false
-        if (this.dataSourceNames.contains(dsName)) {
-            this.admin.deleteDataSource(dsName);
+    	String jndiName = AdminUtil.addJavaPrefix(dsName);
+    	
+    	// get data source
+    	ITeiidDataSource existingTDS = this.connectionManager.getDataSource(jndiName);
+    	ITeiidDataSource copyTDS = new TeiidDataSource(existingTDS.getDisplayName(), jndiName, existingTDS.getType());
+    	this.connectionManager.deleteDataSource(jndiName);
+    	
+        refreshDataSources();
 
-            ITeiidDataSource tds = this.dataSourceByNameMap.get(dsName);
-            
-            refreshDataSources();
-
-            if (tds != null) {
-                this.eventManager.notifyListeners(ExecutionConfigurationEvent.createRemoveDataSourceEvent(tds));
-            }
-        }
+        // Check that local name list contains new dsName
+        existingTDS = this.connectionManager.getDataSource(jndiName); //this.dataSourceByNameMap.get(dsName);
+        if( existingTDS == null ) {
+        	this.eventManager.notifyListeners(ExecutionConfigurationEvent.createRemoveDataSourceEvent(copyTDS));
+        } 
     }
 
     @Override
@@ -274,25 +268,23 @@
     	// 
     	this.admin.close();
         this.translatorByNameMap = new HashMap<String, ITeiidTranslator>();
-        this.dataSourceNames = new ArrayList<String>();
-        this.dataSourceByNameMap = new HashMap<String, ITeiidDataSource>();
-        this.dataSourceTypeNames = new HashSet<String>();
+        this.connectionManager.disconnect();
         this.teiidVdbs = new HashMap<String, ITeiidVdb>();
     }
 
     @Override
     public ITeiidDataSource getDataSource(String name) {
-        return this.dataSourceByNameMap.get(name);
+        return this.connectionManager.getDataSource(name); 
     }
     
     @Override
 	public Collection<ITeiidDataSource> getDataSources() {
-        return this.dataSourceByNameMap.values();
+        return this.connectionManager.getDataSources();
     }
 
     @Override
 	public Set<String> getDataSourceTypeNames() {
-        return this.dataSourceTypeNames;
+        return this.connectionManager.getDataSourceTypeNames();
     }
 
     /**
@@ -304,26 +296,34 @@
 
     @Override
     public ITeiidDataSource getOrCreateDataSource( String displayName,
-                                                  String dsName,
-                                                  String typeName,
+                                                  String jndiName,
+                                                  String dataSourceType,
                                                   Properties properties ) throws Exception {
         ArgCheck.isNotEmpty(displayName, "displayName"); //$NON-NLS-1$
-        ArgCheck.isNotEmpty(dsName, "dsName"); //$NON-NLS-1$
-        ArgCheck.isNotEmpty(typeName, "typeName"); //$NON-NLS-1$
+        ArgCheck.isNotEmpty(jndiName, "jndiName"); //$NON-NLS-1$
+        ArgCheck.isNotEmpty(dataSourceType, "dataSourceType"); //$NON-NLS-1$
         ArgCheck.isNotEmpty(properties, "properties"); //$NON-NLS-1$
+        
+        if(! AdminUtil.hasJavaPrefix(jndiName) ) {
+            throw new TeiidExecutionException(
+            		9996,
+            		"JNDI name : " + jndiName + " does not include the java:/ prefix");
+        }
 
         // Check if exists, return false
-        if (dataSourceExists(dsName)) {
-            ITeiidDataSource tds = this.dataSourceByNameMap.get(dsName);
+        if (dataSourceExists(jndiName)) {
+            ITeiidDataSource tds = this.connectionManager.getDataSource(jndiName); //dataSourceByNameMap.get(dsName);
             if (tds != null) {
                 return tds;
             }
         }
+        
+        boolean isJdbc = "connector-jdbc".equals(dataSourceType);
 
         // For JDBC types, find the matching installed driver.  This is done currently by matching
         // the profile driver classname to the installed driver classname
         String connProfileDriverClass = properties.getProperty("driver-class");  //$NON-NLS-1$
-        if("connector-jdbc".equals(typeName)) {  //$NON-NLS-1$
+        if(isJdbc) {
             // List of driver jars on the connection profile
             String jarList = properties.getProperty("jarList");  //$NON-NLS-1$
             
@@ -332,7 +332,7 @@
             
             // If a matching datasource was found, set typename
             if(dsNameMatch!=null) {
-                typeName=dsNameMatch;
+            	dataSourceType=dsNameMatch;
             // No matching datasource, attempt to deploy the driver if jarList is populated.
             } else if(jarList!=null && jarList.trim().length()>0) {
                 // Try to deploy the jars
@@ -343,32 +343,29 @@
                 // Retry the name match after deployment.
                 dsNameMatch = getDSMatchForDriverClass(connProfileDriverClass);
                 if(dsNameMatch!=null) {
-                    typeName=dsNameMatch;
+                	dataSourceType=dsNameMatch;
                 }
             }
         }
         // Verify the "typeName" exists.
-        if (!this.dataSourceTypeNames.contains(typeName)) {
-            if("connector-jdbc".equals(typeName)) {  //$NON-NLS-1$
+        if (!this.connectionManager.dataSourceTypeExists(dataSourceType)) {
+            if(isJdbc) {  //$NON-NLS-1$
                 throw new TeiidExecutionException(
                 		ITeiidDataSource.ERROR_CODES.JDBC_DRIVER_SOURCE_NOT_FOUND,
                 		Messages.getString(Messages.ExecutionAdmin.jdbcSourceForClassNameNotFound, connProfileDriverClass, getServer()));
             } else {
                 throw new TeiidExecutionException(
                 		ITeiidDataSource.ERROR_CODES.DATA_SOURCE_TYPE_DOES_NOT_EXIST_ON_SERVER,
-                		Messages.getString(Messages.ExecutionAdmin.dataSourceTypeDoesNotExist, typeName, getServer()));
+                		Messages.getString(Messages.ExecutionAdmin.dataSourceTypeDoesNotExist, dataSourceType, getServer()));
             }
         }
 
-        this.admin.createDataSource(dsName, typeName, properties);
-
-        // call admin.refresh() to clear cached resource info
-        this.admin.refresh();
+        this.connectionManager.createDataSource(jndiName, dataSourceType, isJdbc, properties);
         
         refreshDataSources();
 
         // Check that local name list contains new dsName
-        ITeiidDataSource tds = this.dataSourceByNameMap.get(dsName);
+        ITeiidDataSource tds = this.connectionManager.getDataSource(jndiName);
         if( tds != null ) {
         	this.eventManager.notifyListeners(ExecutionConfigurationEvent.createAddDataSourceEvent(tds));
         	return tds;
@@ -377,7 +374,7 @@
         // We shouldn't get here if data source was created
         throw new TeiidExecutionException(
         		ITeiidDataSource.ERROR_CODES.DATA_SOURCE_COULD_NOT_BE_CREATED,
-        		Messages.getString(Messages.ExecutionAdmin.errorCreatingDataSource, dsName, typeName));
+        		Messages.getString(Messages.ExecutionAdmin.errorCreatingDataSource, jndiName, dataSourceType));
     }
 
     /**
@@ -458,8 +455,8 @@
                     try {
                         adminSpec.deploy(admin, fileName, iStream);
                         
-                        // call admin.refresh() to clear cached resource info
-                        this.admin.refresh();                    
+                        refresh();
+                        
                     } catch (Exception ex) {
                         // Jar deployment failed
                         TeiidRuntimePlugin.logError(getClass().getSimpleName(), ex, Messages.getString(Messages.ExecutionAdmin.jarDeploymentFailed, theFile.getPath()));
@@ -469,7 +466,6 @@
                     	try {
 							iStream.close();
 						} catch (IOException e) {
-							// TODO Auto-generated catch block
 							e.printStackTrace();
 						}
                     }
@@ -501,10 +497,8 @@
                 try {
                     adminSpec.deploy(admin, fileName, iStream);
                     
-                    // call admin.refresh() to clear cached resource info
-                    this.admin.refresh();
+                    refresh();
                     
-                    refreshDataSourceTypes();
                 } catch (Exception ex) {
                     // Jar deployment failed
                     TeiidRuntimePlugin.logError(getClass().getSimpleName(), ex, Messages.getString(Messages.ExecutionAdmin.jarDeploymentFailed, jarOrRarFile.getPath()));
@@ -535,46 +529,22 @@
     @Override
     public ITeiidTranslator getTranslator( String name ) {
         ArgCheck.isNotEmpty(name, "name"); //$NON-NLS-1$
-        return this.translatorByNameMap.get(name);
+        return this.connectionManager.getTranslator(name); //this.translatorByNameMap.get(name);
     }
 
     @Override
     public Collection<ITeiidTranslator> getTranslators() {
-        return Collections.unmodifiableCollection(translatorByNameMap.values());
+        return this.connectionManager.getTranslators(); //Collections.unmodifiableCollection(translatorByNameMap.values());
     }
 
     @Override
     public Set<String> getDataSourceTemplateNames() throws Exception {
-        return this.dataSourceTypeNames;
+        return this.connectionManager.getDataSourceTypeNames();
     }
     
-    @SuppressWarnings("unchecked")
 	@Override
     public Collection<TeiidPropertyDefinition> getTemplatePropertyDefns(String templateName) throws Exception {
-    	
-        Collection<? extends PropertyDefinition> propDefs = this.admin.getTemplatePropertyDefinitions(templateName);
-
-        Collection<TeiidPropertyDefinition> teiidPropDefns = new ArrayList<TeiidPropertyDefinition>();
-        
-        for (PropertyDefinition propDefn : propDefs) {
-            TeiidPropertyDefinition teiidPropertyDefn = new TeiidPropertyDefinition();
-            
-            teiidPropertyDefn.setName(propDefn.getName());
-            teiidPropertyDefn.setDisplayName(propDefn.getDisplayName());
-            teiidPropertyDefn.setDescription(propDefn.getDescription());
-            teiidPropertyDefn.setPropertyTypeClassName(propDefn.getPropertyTypeClassName());
-            teiidPropertyDefn.setDefaultValue(propDefn.getDefaultValue());
-            teiidPropertyDefn.setAllowedValues(propDefn.getAllowedValues());
-            teiidPropertyDefn.setModifiable(propDefn.isModifiable());
-            teiidPropertyDefn.setConstrainedToAllowedValues(propDefn.isConstrainedToAllowedValues());
-            teiidPropertyDefn.setAdvanced(propDefn.isAdvanced());
-            teiidPropertyDefn.setRequired(propDefn.isRequired());
-            teiidPropertyDefn.setMasked(propDefn.isMasked());
-            
-            teiidPropDefns.add(teiidPropertyDefn);
-        }
-        
-        return teiidPropDefns;
+    	return this.connectionManager.getTemplatePropertyDefns(templateName);
     }
 
     /*
@@ -655,9 +625,7 @@
     
     private void init() throws Exception {
         this.translatorByNameMap = new HashMap<String, ITeiidTranslator>();
-        this.dataSourceNames = new ArrayList<String>();
-        this.dataSourceByNameMap = new HashMap<String, ITeiidDataSource>();
-        this.dataSourceTypeNames = new HashSet<String>();
+        this.connectionManager.init();
         refreshVDBs();
     }
 
@@ -702,20 +670,20 @@
     	refreshing = true;
    
     	// Clears any cached data source or translator info prior to reloading
-    	this.admin.refresh();
     	
         // populate data source type names
     	Exception resultException = null;
     	
     	try {
-	    	try {
-	    		refreshDataSourceTypes();
-	    	} catch (Exception ex) {
-	    		resultException = ex;
-	    	}
 	
 	    	try {
 	    		refreshDataSources();
+	    	} catch (Exception ex) {
+	    		resultException = ex;
+	    	}
+	    	
+	    	try {
+	    		refreshDataSourceTypes();
 	    	} catch (Exception ex) {
 	    		resultException = ex;
 	    	}
@@ -746,23 +714,7 @@
     }
     
     protected void refreshDataSources() throws Exception {
-        this.dataSourceByNameMap.clear();
-        this.dataSourceNames = new ArrayList<String>(this.admin.getDataSourceNames());
-        
-        Collection<ITeiidDataSource> tdsList = connectionMatcher.findTeiidDataSources(this.dataSourceNames);
-        for (ITeiidDataSource ds : tdsList) {
-            if (!isLessThanTeiidEight()) {
-                /* Not done in Teiid 7.7 */
-                // Get Properties for the source
-                Properties dsProps = this.admin.getDataSource(ds.getName());
-                // Transfer properties to the ITeiidDataSource
-                ds.getProperties().clear();
-                ds.getProperties().putAll(dsProps);
-            }
-
-        	// put ds into map
-            this.dataSourceByNameMap.put(ds.getName(), ds);
-        }
+    	this.connectionManager.refreshDataSources();
     }
 
     /**
@@ -772,34 +724,7 @@
      * @throws Exception
      */
     protected void refreshTranslators() throws Exception {
-    	Collection<? extends Translator> translators = this.admin.getTranslators();
-        for (Translator translator : translators ) {
-            if (translator.getName() != null) {
-            	TeiidTranslator teiidTranslator = null;
-            	
-                if( teiidServer.getServerVersion().isLessThan(Version.TEIID_8_6)) {
-                	Collection<? extends PropertyDefinition> propDefs = this.admin.getTemplatePropertyDefinitions(translator.getName());
-                	teiidTranslator =  new TeiidTranslator(translator, propDefs, teiidServer);
-                	
-                	this.translatorByNameMap.put(translator.getName(), teiidTranslator);
-                } else if( teiidServer.getServerVersion().isLessThan(Version.TEIID_8_7)) {
-                	@SuppressWarnings("deprecation")
-					Collection<? extends PropertyDefinition> propDefs = this.admin.getTranslatorPropertyDefinitions(translator.getName());
-                	teiidTranslator =   new TeiidTranslator(translator, propDefs, teiidServer);
-                	
-                	this.translatorByNameMap.put(translator.getName(), teiidTranslator);
-                } else { // TEIID SERVER VERSION 8.7 AND HIGHER
-                	Collection<? extends PropertyDefinition> propDefs  = 
-                			this.admin.getTranslatorPropertyDefinitions(translator.getName(), Admin.TranlatorPropertyType.OVERRIDE);
-                	Collection<? extends PropertyDefinition> importPropDefs  = 
-                			this.admin.getTranslatorPropertyDefinitions(translator.getName(), Admin.TranlatorPropertyType.IMPORT);
-                	Collection<? extends PropertyDefinition> extPropDefs  = 
-                			this.admin.getTranslatorPropertyDefinitions(translator.getName(), Admin.TranlatorPropertyType.EXTENSION_METADATA);
-                	teiidTranslator = new TeiidTranslator(translator, propDefs, importPropDefs, extPropDefs, teiidServer);
-                	this.translatorByNameMap.put(translator.getName(), teiidTranslator);
-                }
-            }
-        }
+    	this.connectionManager.refreshTranslators();
     }
 
     protected void refreshVDBs() throws Exception {
@@ -813,8 +738,7 @@
     }
     
     protected void refreshDataSourceTypes() throws Exception {
-        // populate data source type names set
-        this.dataSourceTypeNames = new HashSet<String>(this.admin.getDataSourceTemplateNames());
+    	this.connectionManager.refreshDataSourceTypes();
     }
 
     /**
