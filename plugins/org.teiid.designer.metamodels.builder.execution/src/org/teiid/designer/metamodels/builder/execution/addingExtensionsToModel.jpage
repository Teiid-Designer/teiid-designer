    // ========================================================================
	// Getting a list of all VDBs files in the workspace 
    // ========================================================================

    VdbResourceCollectorVisitor visitor = new VdbResourceCollectorVisitor() {
        private List resources = new ArrayList(); 
        public boolean visit(IResource resource) throws CoreException {
            if(resource.exists() && resource.getType() == IResource.FILE  && ModelUtil.isVdbArchiveFile(resource)) {
                resources.add(resource);
            }
            return true;
        }
        public IFile[] getVdbResources() {
            return (IFile[]) resources.toArray(new IFile[resources.size()]);
        }
    
    };
    org.teiid.designer.core.workspace.WorkspaceResourceFinderUtil.getProjectFileResources(visitor);

    // ========================================================================
	//                 Creating extension models
    // ========================================================================
    
	// Get the resource corresponding to the model being extended
	org.eclipse.emf.ecore.resource.Resource model = ...
	
	// Create a handle to a java.io.File that will become the extension model.
	java.io.File f = ...
	
	// Create a file URI to use when creating the extension resource.
	org.eclipse.emf.common.util.URI extUri = URI.createFileURI(f.getCanonicalPath());
	
	// Obtain a container to use for creating and holding the new extension resource -
	// assume the "model container" which is used to hold all workspace resources
	com.metamatrix.modeler.core.container.Container cntr = com.metamatrix.modeler.core.ModelerCore.getModelContainer();
	
	// Create the new extension resource
	org.eclipse.emf.ecore.resource.Resource extRsrc = cntr.createResource(extUri);
	
	// Add a ModelAnnotation to the newly created resource to identify it as an extension model
	com.metamatrix.metamodels.core.ModelAnnotation ma = com.metamatrix.metamodels.core.CorePackage.eINSTANCE.getCoreFactory().createModelAnnotation();
	ma.setModelType(com.metamatrix.metamodels.core.ModelType.EXTENSION_LITERAL);
	ma.setPrimaryMetamodelUri(com.metamatrix.metamodels.core.CorePackage.eNS_URI);
	extRsrc.getContents().add(ma);
	
	// Add an AnnotationContainer to the newly created resource.  Extension values are stored as name-value pairs
	// within annotations of the model being extended
	com.metamatrix.metamodels.core.AnnotationContainer annotCntr = com.metamatrix.metamodels.core.CorePackage.eINSTANCE.getCoreFactory().createAnnotationContainer();
	extRsrc.getContents().add(annotCntr);
	
	// Create a new extension ModelResource in the workspace. A ModelResource instance is the bridge
	// between the underlying EMF resource created above and the IResource used by Eclipse projects
	// within the workspace
    org.eclipse.core.resources.IProject iProj = ...
    org.eclipse.core.resources.IFile file = iProj.getFile("extensionModelName.xmi");
    com.metamatrix.modeler.core.workspace.ModelResource modelResource = com.metamatrix.modeler.core.ModelerCore.create(file);
	
	// Creating new XPackage
	com.metamatrix.metamodels.core.extension.XPackage xPkg = com.metamatrix.metamodels.core.extension.ExtensionPackage.eINSTANCE.getExtensionFactory().createXPackage();
	xPkg.setName("newXPackageName");
	extRsrc.getContents().add(xPkg);
	
	// Setting the XPackage reference on an existing XMI model
	com.metamatrix.modeler.core.ModelEditor editor = com.metamatrix.modeler.core.ModelerCore.getModelEditor();
	com.metamatrix.modeler.core.util.ModelContents contents = editor.getModelContents(model);
	ma = contents.getModelAnnotation();
	ma.setExtensionPackage(xPkg);
	
	// Creating new XClass
	com.metamatrix.metamodels.core.extension.XClass xClass = com.metamatrix.metamodels.core.extension.ExtensionPackage.eINSTANCE.getExtensionFactory().createXClass();
	xClass.setName("newXClass");
	xPkg.getEClassifiers().add(xClass);
	
	// Example:  apply extension to Relational BaseTable
	org.eclipse.emf.ecore.EClass baseTable = com.metamatrix.metamodels.relational.RelationalPackage.getBaseTable();
	xClass.setExtendedClass(baseTable);
	
	// Creating new XEnum instance
	com.metamatrix.metamodels.core.extension.XEnum xEnum = com.metamatrix.metamodels.core.extension.ExtensionPackage.eINSTANCE.getExtensionFactory().createXEnum();
	xPkg.getEClassifiers().add(xEnum);
	
	// Creating new XEnumLiteral instances (the first literal I believe is the default value)
	com.metamatrix.metamodels.core.extension.XEnumLiteral literal_1 = com.metamatrix.metamodels.core.extension.ExtensionPackage.eINSTANCE.getExtensionFactory().createXEnumLiteral();
	literal_1.setValue(0);        // integer-typed value
	literal_1.setLiteral("ABC");  // name
	xEnum.getELiterals().add(literal_1);
	
	com.metamatrix.metamodels.core.extension.XEnumLiteral literal_2 = com.metamatrix.metamodels.core.extension.ExtensionPackage.eINSTANCE.getExtensionFactory().createXEnumLiteral();
	literal_2.setValue(1);        // integer-typed value
	literal_2.setLiteral("DEF");  // name
	xEnum.getELiterals().add(literal_2);
	
	com.metamatrix.metamodels.core.extension.XEnumLiteral literal_3 = com.metamatrix.metamodels.core.extension.ExtensionPackage.eINSTANCE.getExtensionFactory().createXEnumLiteral();
	literal_3.setValue(1);        // integer-typed value
	literal_3.setLiteral("HIJ");  // name
	xEnum.getELiterals().add(literal_3);
		
	// Creating new XAttribute instances
	com.metamatrix.metamodels.core.extension.XAttribute xAttrib_1 = com.metamatrix.metamodels.core.extension.ExtensionPackage.eINSTANCE.getExtensionFactory().createXAttribute();
	xAttrib_1.setName("newXAttribute_1");
	xAttrib_1.setLowerBound(0); // single valued optional feature
	xAttrib_1.setUpperBound(1);
	xClass.getEStructuralFeatures().add(xAttrib_1);
	
	com.metamatrix.metamodels.core.extension.XAttribute xAttrib_2 = com.metamatrix.metamodels.core.extension.ExtensionPackage.eINSTANCE.getExtensionFactory().createXAttribute();
	xAttrib_2.setName("newXAttribute_2");
	xAttrib_2.setLowerBound(0); // single valued optional feature
	xAttrib_2.setUpperBound(1);
	xClass.getEStructuralFeatures().add(xAttrib_2);
	
	com.metamatrix.metamodels.core.extension.XAttribute xAttrib_3 = com.metamatrix.metamodels.core.extension.ExtensionPackage.eINSTANCE.getExtensionFactory().createXAttribute();
	xAttrib_3.setName("newXAttribute_3");
	xAttrib_3.setLowerBound(0); // single valued optional feature
	xAttrib_3.setUpperBound(1);
	xClass.getEStructuralFeatures().add(xAttrib_3);
	
	// Below is a list of the basic types available for an XAttribute
	// EDataType       		Java primitive type or Class
    //  EDouble         	 double
    //  EFloat          	 float
    //  EInt            	 int
    //  ELong           	 long
    //  EShort          	 short
    //  EBooleanObject  	 java.lang.Boolean
    //  EByteObject     	 java.lang.Byte
	//  ECharacterObject	 java.lang.Character
	//  EDoubleObject		 java.lang.Double
	//  EFloatObject		 java.lang.Float
	//  EIntegerObject	     java.lang.Integer
	//  ELongObject          java.lang.Long
	//  EShortObject         java.lang.Short
	//  EString              java.lang.String
	
	// Example:  set XAttribute EDataType to string
	xAttrib_1.setEType(org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEString());
	xAttrib_1.setDefaultValue("DefaultValue_1");
	
	// Example:  set XAttribute EDataType to float
	xAttrib_2.setEType(org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEFloat());
	java.lang.Float defaultValue = (Float)xPkg.getEFactoryInstance().createFromString(xAttrib_2.getEAttributeType(),"12.34");
	xAttrib_2.setDefaultValue(defaultValue);
	
	// Example:  set XAttribute EDataType to Enum
	xAttrib_3.setEType(xEnum);
	
	// Save the extension resource to persist the model
	extRsrc.save(java.util.Collections.EMPTY_MAP);
	
	// The values for an XAttribute are stored on Annotation objects within the model you are 
	// extending.  The ObjectExtension class was written to encapsulate that logic.  To create
	// an ObjectExtension instance you need a handle to the model entity being extended and its
	// associated XClass.  For our example here, we are extending BaseTable by adding a new
	// string property called "newXAttribute_1".  If we have an instance of a BaseTable we
	// can set the value on the extension property using the following logic
	BaseTable table = ...
	com.metamatrix.modeler.internal.core.ObjectExtension objExtension = editor.getExtension(table);
	objExtension.eSet(xAttrib_1,"newValue");
	objExtension.eSet(xAttrib_2,new Float("43.21"));
	
	// When all extension property values are set the extended model must be saved
	model.save(java.util.Collections.EMPTY_MAP);
	
	